// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: post_loader_service/post_loader.proto

package post_loader_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoadPostParam struct {
	Pages                int64    `protobuf:"varint,1,opt,name=Pages,proto3" json:"Pages"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadPostParam) Reset()         { *m = LoadPostParam{} }
func (m *LoadPostParam) String() string { return proto.CompactTextString(m) }
func (*LoadPostParam) ProtoMessage()    {}
func (*LoadPostParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89075b5b4981c5e, []int{0}
}
func (m *LoadPostParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadPostParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadPostParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadPostParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadPostParam.Merge(m, src)
}
func (m *LoadPostParam) XXX_Size() int {
	return m.Size()
}
func (m *LoadPostParam) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadPostParam.DiscardUnknown(m)
}

var xxx_messageInfo_LoadPostParam proto.InternalMessageInfo

func (m *LoadPostParam) GetPages() int64 {
	if m != nil {
		return m.Pages
	}
	return 0
}

type LoadingStatus struct {
	ProcessId            string   `protobuf:"bytes,1,opt,name=ProcessId,proto3" json:"ProcessId"`
	Status               string   `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status"`
	WorkOfDone           int64    `protobuf:"varint,3,opt,name=WorkOfDone,proto3" json:"WorkOfDone"`
	TotalWork            int64    `protobuf:"varint,4,opt,name=TotalWork,proto3" json:"TotalWork"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadingStatus) Reset()         { *m = LoadingStatus{} }
func (m *LoadingStatus) String() string { return proto.CompactTextString(m) }
func (*LoadingStatus) ProtoMessage()    {}
func (*LoadingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89075b5b4981c5e, []int{1}
}
func (m *LoadingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadingStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadingStatus.Merge(m, src)
}
func (m *LoadingStatus) XXX_Size() int {
	return m.Size()
}
func (m *LoadingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LoadingStatus proto.InternalMessageInfo

func (m *LoadingStatus) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *LoadingStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *LoadingStatus) GetWorkOfDone() int64 {
	if m != nil {
		return m.WorkOfDone
	}
	return 0
}

func (m *LoadingStatus) GetTotalWork() int64 {
	if m != nil {
		return m.TotalWork
	}
	return 0
}

type JobId struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobId) Reset()         { *m = JobId{} }
func (m *JobId) String() string { return proto.CompactTextString(m) }
func (*JobId) ProtoMessage()    {}
func (*JobId) Descriptor() ([]byte, []int) {
	return fileDescriptor_d89075b5b4981c5e, []int{2}
}
func (m *JobId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JobId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JobId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JobId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobId.Merge(m, src)
}
func (m *JobId) XXX_Size() int {
	return m.Size()
}
func (m *JobId) XXX_DiscardUnknown() {
	xxx_messageInfo_JobId.DiscardUnknown(m)
}

var xxx_messageInfo_JobId proto.InternalMessageInfo

func (m *JobId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadPostParam)(nil), "post_loader_service.LoadPostParam")
	proto.RegisterType((*LoadingStatus)(nil), "post_loader_service.LoadingStatus")
	proto.RegisterType((*JobId)(nil), "post_loader_service.JobId")
}

func init() {
	proto.RegisterFile("post_loader_service/post_loader.proto", fileDescriptor_d89075b5b4981c5e)
}

var fileDescriptor_d89075b5b4981c5e = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0xc8, 0x2f, 0x2e,
	0x89, 0xcf, 0xc9, 0x4f, 0x4c, 0x49, 0x2d, 0x8a, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5,
	0x47, 0x12, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xc6, 0xa2, 0x4c, 0x49, 0x95, 0x8b,
	0xd7, 0x27, 0x3f, 0x31, 0x25, 0x20, 0xbf, 0xb8, 0x24, 0x20, 0xb1, 0x28, 0x31, 0x57, 0x48, 0x84,
	0x8b, 0x35, 0x20, 0x31, 0x3d, 0xb5, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0x39, 0x08, 0xc2, 0x51,
	0x6a, 0x66, 0x84, 0xa8, 0xcb, 0xcc, 0x4b, 0x0f, 0x2e, 0x49, 0x2c, 0x29, 0x2d, 0x16, 0x92, 0xe1,
	0xe2, 0x0c, 0x28, 0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0xf6, 0x4c, 0x01, 0xab, 0xe5, 0x0c, 0x42, 0x08,
	0x08, 0x89, 0x71, 0xb1, 0x41, 0xd4, 0x49, 0x30, 0x81, 0xa5, 0xa0, 0x3c, 0x21, 0x39, 0x2e, 0xae,
	0xf0, 0xfc, 0xa2, 0x6c, 0xff, 0x34, 0x97, 0xfc, 0xbc, 0x54, 0x09, 0x66, 0xb0, 0x15, 0x48, 0x22,
	0x20, 0x53, 0x43, 0xf2, 0x4b, 0x12, 0x73, 0x40, 0x42, 0x12, 0x2c, 0x60, 0x69, 0x84, 0x80, 0x92,
	0x38, 0x17, 0xab, 0x57, 0x7e, 0x92, 0x67, 0x8a, 0x10, 0x1f, 0x17, 0x13, 0xdc, 0x56, 0x26, 0xcf,
	0x14, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71,
	0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x9f, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f,
	0x29, 0xa2, 0x2b, 0x1c, 0x01, 0x00, 0x00,
}

func (m *LoadPostParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadPostParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadPostParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pages != 0 {
		i = encodeVarintPostLoader(dAtA, i, uint64(m.Pages))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LoadingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TotalWork != 0 {
		i = encodeVarintPostLoader(dAtA, i, uint64(m.TotalWork))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkOfDone != 0 {
		i = encodeVarintPostLoader(dAtA, i, uint64(m.WorkOfDone))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintPostLoader(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProcessId) > 0 {
		i -= len(m.ProcessId)
		copy(dAtA[i:], m.ProcessId)
		i = encodeVarintPostLoader(dAtA, i, uint64(len(m.ProcessId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JobId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JobId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JobId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPostLoader(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPostLoader(dAtA []byte, offset int, v uint64) int {
	offset -= sovPostLoader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoadPostParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pages != 0 {
		n += 1 + sovPostLoader(uint64(m.Pages))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProcessId)
	if l > 0 {
		n += 1 + l + sovPostLoader(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovPostLoader(uint64(l))
	}
	if m.WorkOfDone != 0 {
		n += 1 + sovPostLoader(uint64(m.WorkOfDone))
	}
	if m.TotalWork != 0 {
		n += 1 + sovPostLoader(uint64(m.TotalWork))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JobId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPostLoader(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPostLoader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPostLoader(x uint64) (n int) {
	return sovPostLoader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoadPostParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadPostParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadPostParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pages", wireType)
			}
			m.Pages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pages |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPostLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostLoader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProcessId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostLoader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkOfDone", wireType)
			}
			m.WorkOfDone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkOfDone |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWork", wireType)
			}
			m.TotalWork = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWork |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPostLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPostLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JobId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPostLoader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JobId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JobId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPostLoader
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPostLoader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPostLoader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPostLoader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPostLoader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPostLoader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPostLoader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPostLoader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPostLoader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPostLoader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPostLoader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPostLoader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPostLoader = fmt.Errorf("proto: unexpected end of group")
)
